// i. Interface for Stack Operations
interface Stack {
 void push(int element);
 int pop();
 boolean isEmpty();
 int size();
}
// ii. Fixed-Length Stack Implementation
class FixedLengthStack implements Stack {
 private int[] stackArray;
 private int top;
 private int capacity;
 public FixedLengthStack(int capacity) {
 this.capacity = capacity;
this.stackArray = new int[capacity];
 this.top = -1;
 }
 @Override
 public void push(int element) {
 if (top == capacity - 1) {
 System.out.println("Stack Overflow: Cannot push element, stack is full.");
 return;
 }
 stackArray[++top] = element;
 }
 @Override
 public int pop() {
 if (isEmpty()) {
 System.out.println("Stack Underflow: Cannot pop element, stack is empty.");
 return -1;
 }
 return stackArray[top--];
 }
 @Override
 public boolean isEmpty() {
 return top == -1;
 }}
// iii. Dynamic-Length Stack Implementation
class DynamicLengthStack implements Stack {
 private int[] stackArray;
 private int top;
 private int capacity;
 public DynamicLengthStack() {
 this.capacity = 10; // Initial capacity
 this.stackArray = new int[capacity];
 this.top = -1;
 }
 @Override
 public void push(int element) {
 if (top == capacity - 1) {
 // If the stack is full, double the capacity
 capacity *= 2;
 int[] newStackArray = new int[capacity];
 System.arraycopy(stackArray, 0, newStackArray, 0, stackArray.length);
 stackArray = newStackArray;
 }
 stackArray[++top] = element;
 }
 @Override
 public int pop() {
 if (isEmpty()) {
 System.out.println("Stack Underflow: Cannot pop element, stack is empty.");
 return -1;
}
 return stackArray[top--];
 }
 @Override
 public boolean isEmpty() {
 return top == -1;
 }
 
 @Override
 public int size() {
 return top + 1;
 }
}
// iv. Class Demonstrating Runtime Binding and Stack Operations
class StackOperations {
 public static void main(String[] args) {
 // Using FixedLengthStack through Interface reference
 Stack fixedStack = new FixedLengthStack(5);
 System.out.println("Fixed Length Stack Operations:");
 performStackOperations(fixedStack);
 // Using DynamicLengthStack through Interface reference
 Stack dynamicStack = new DynamicLengthStack();
 System.out.println("\nDynamic Length Stack Operations:");
 performStackOperations(dynamicStack);
 }
 public static void performStackOperations(Stack stack) {
 System.out.println("Stack Size: " + stack.size());
stack.push(10);
 System.out.println("Stack Size: " + stack.size());
 stack.push(20);
 System.out.println("Stack Size: " + stack.size());
 stack.push(30);
 System.out.println("Stack Size: " + stack.size());
 System.out.println("Pop: " + stack.pop());
 System.out.println("Stack Size: " + stack.size());
 System.out.println("Pop: " + stack.pop());
 SystemThird.out.println("Stack Size: " + stack.size());
 System.out.println("Is Empty: " + stack.isEmpty());
 System.out.println("Stack Size: " + stack.size());
 System.out.println("Pop: " + stack.pop());
 System.out.println("Stack Size: " + stack.size());
 System.out.println("Is Empty: " + stack.isEmpty());
 }
} 
 
 @Override
 public int size() {







##generics
import java.util.Arrays;

public class GQueue<T> {
    T[] que;
    int size;

    public GQueue() {
        que = (T[]) new Object[2];
        size = 0;
    }

    public void enqueue(T element) {
        if (size == que.length) {
            int newCapacity = que.length * 2;
            que = Arrays.copyOf(que, newCapacity);
        }
        que[size++] = element;
    }

    public T dequeue() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return null;
        }
        T del_element = que[0];
        System.arraycopy(que, 1, que, 0, size - 1);
        que[--size] = null;
        return del_element;
    }

    public void display() {
        for (int i = 0; i < size; i++) {
            System.out.println(que[i]);
        }
    }

    public static void main(String[] args) {
        GQueue<Integer> integerQueue = new GQueue<>();
        integerQueue.enqueue(10);
        integerQueue.enqueue(20);
        integerQueue.enqueue(30);
        System.out.println("Elements in the queue are:");
        integerQueue.display();
        int dequeuedElement = integerQueue.dequeue();
        System.out.println("Dequeued element: " + dequeuedElement);
        System.out.println("Queue size: " + integerQueue.size);
    }
}

 return top + 1;
 }
